implement main
    open core, file, stdio

domains
    genre = детский; научный; бытовой; развлекательный; новостной; спортивный; политический.

class facts - publications
    газета : (integer Id, string Название, genre Жанр, integer Цена).
    подписчик : (integer Id, string ФИО, integer Возраст, string Адрес).
    подписан : (integer Id_подписчика, integer Id_подписки, integer Длительность).

%правило: вывод названия газеты и суммы подписки по имени подписчика.
class predicates
    сумма_подписки : (string Имя, string Название, integer Цена) nondeterm anyflow.
clauses
    сумма_подписки(Имя, Название, Цена) :-
        газета(Id_газеты, Название, _, Цена),
        подписчик(Id_подписчика, Имя, _, _),
        подписан(Id_подписчика, Id_газеты, Длительность),
        Сумма = Длительность * Цена,
        write("Сумма="),
        write(Сумма),
        nl,
        write(Название),
        nl,
        nl.

%правило:Вывод газеты по имени подписчика
class predicates
    подписчик_газеты : (string Имя) nondeterm anyflow.
clauses
    подписчик_газеты(Имя) :-
        подписчик(Id_подписчика, Имя, _, _),
        подписан(Id_подписчика, Id_газеты, _),
        газета(Id_газеты, Название, _, _),
        write(Имя, ": ", Название),
        nl.

%правило:Вывод подписчиков газеты
class predicates
    подписчики_газеты : (string Название) nondeterm anyflow.
clauses
    подписчики_газеты(Название) :-
        газета(Id_газеты, Название, _, _),
        подписчик(Id_подписчика, Имя, _, _),
        подписан(Id_подписчика, Id_газеты, _),
        write(Имя),
        nl.

%правило:Вывод адреса доставки по названию газеты
class predicates
    улица_по_газете : (string Название) nondeterm anyflow.
clauses
    улица_по_газете(Название) :-
        газета(Id_газеты, Название, _, _),
        подписан(Id_подписчика, Id_газеты, _),
        подписчик(Id_подписчика, _, _, Адрес),
        write(Адрес),
        nl.

%правило:Вывод возраста подписчика по его имени
class predicates
    возраст_пописчика : (string Имя, integer Возраст) nondeterm anyflow.
clauses
    возраст_пописчика(Имя, Возраст) :-
        подписчик(_, Имя, Возраст, _),
        write(Имя, ": "),
        write(Возраст),
        nl.

%правило:Вывод людей, подписанных на определенный жанр газеты
class predicates
    подписчики_жанра : (genre Жанр) nondeterm anyflow.
clauses
    подписчики_жанра(Жанр) :-
        газета(Id_издания, _, Жанр, _),
        подписан(Id_подписчика, Id_издания, _),
        подписчик(Id_подписчика, Имя, _, _),
        write(Жанр, ": "),
        write(Имя),
        nl.

%правило:Цена издания по названию
class predicates
    цена_газеты : (string Название, integer Цена) nondeterm anyflow.
clauses
    цена_газеты(Название, Цена) :-
        газета(_, Название, _, Цена),
        write(Название, ": "),
        write(Цена),
        nl.

class facts
    s : (real Sum) single.

clauses
    s(0).

%Правило "Сумма всех изданий одного жанра"
class predicates
    сумма : (genre Жанр) nondeterm anyflow.
clauses
    сумма(Жанр) :-
        assert(s(0)),
        газета(_, _, Жанр, Цена),
        s(Sum),
        NewSum = Sum + Цена,
        assert(s(NewSum)),
        fail.

    сумма(Жанр) :-
        s(Sum),
        write(Жанр, ": сумма = ", Sum),
        nl.

clauses
    run() :-
        consult("../family.txt", publications),
        fail.

    run() :-
        write("\nПодписки человека:\n"),
        подписчик_газеты("Тихомирова_Полина_Кирилловна"),
        fail.

    run() :-
        write("\nГазета и её подписчики: \n"),
        write("Рецепты", "\n"),
        подписчики_газеты("Рецепты"),
        fail.

    run() :-
        write("\nПодписчики жанра: \n"),
        подписчики_жанра(детский),
        fail.

    run() :-
        write("\nДоставка газеты: \n"),
        write("Вестник\n"),
        улица_по_газете("Вестник"),
        fail.

    run() :-
        write("\nИмя человек и его возраст: \n"),
        возраст_пописчика("Петухов_Мирон_Иванович", _),
        fail.

    run() :-
        write("\nЦена газеты по названию: \n"),
        цена_газеты("Молодая гвардия", _),
        fail.

    run() :-
        write("\nЦена всех изданий по жанру: \n"),
        сумма(спортивный),
        fail.

    run() :-
        write("\nСумма подписки подписчика: \n"),
        сумма_подписки("Ермаков_Демид_Никитич", _, _),
        fail.

    run().

end implement main

goal
    console::runUtf8(main::run).
